@page
@model HashMat.Pages.JohnModel
@{
    ViewData["Title"] = "John";
}

<div class="container my-4">
    <div class="row">
        <!-- Left Column: Input Options -->
        <div class="col-md-6">
            <h1 class="mb-4">John the Ripper</h1>

            <p>Configure the settings and click the button to run John the Ripper:</p>

            <form id="runJTRForm" method="post" enctype="multipart/form-data">
                <!-- Input Option Section -->
                <div class="mb-4">
                    <h4>Input Option:</h4>

                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="inputOption" id="inputOptionInput" value="input" checked>
                        <label class="form-check-label mr-3" for="inputOptionInput">
                            Input
                        </label>
                        <input type="text" class="form-control" name="input" id="input" />
                    </div>

                    <div class="form-check mt-2">
                        <input class="form-check-input" type="radio" name="inputOption" id="inputOptionFile" value="file">
                        <label class="form-check-label mr-3" for="inputOptionFile">
                            File
                        </label>
                        <input type="file" class="form-control-file" name="hashListFile" id="hashListFile" />
                    </div>
                </div>

                <!-- Algorithm Section -->
                <div class="mb-4">
                    <h4 class="mb-3">Algorithm:</h4>
                    <select class="form-control" name="algorithm" id="algorithm">
                        @foreach (var algorithm in Model.Algorithms)
                        {
                            <option value="@algorithm">@algorithm</option>
                        }
                    </select>
                </div>

                <!-- Word List Option Section -->
                <div class="mb-4">
                    <h4>Word List Option:</h4>

                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="wordListOption" id="wordListOptionNo" value="no-wordlist" checked>
                        <label class="form-check-label mr-3" for="wordListOptionNo">
                            No Word List
                        </label>
                    </div>

                    <div class="form-check mt-2">
                        <input class="form-check-input" type="radio" name="wordListOption" id="wordListOptionFile" value="file">
                        <label class="form-check-label mr-3" for="wordListOptionFile">
                            File
                        </label>
                        <input type="file" class="form-control-file" name="wordListFile" id="wordListFile" />
                    </div>

                    <div class="form-check mt-2">
                        <input class="form-check-input" type="radio" name="wordListOption" id="wordListOptionSelection" value="selection">
                        <label class="form-check-label mr-3" for="wordListOptionSelection">
                            Selection
                        </label>
                        <select class="form-control" name="selectedWordList" id="selectedWordList">
                            @foreach (var wordlist in Model.Wordlists)
                            {
                                <option value="@wordlist">@wordlist</option>
                            }
                            <!-- Add more options as needed -->
                        </select>
                    </div>
                </div>

                <div class="mb-4">
                    <h4 class="mb-3">Other Options:</h4>
                    <label class="form-check-label mr-3" for="selectedEncoding">
                        Encoding
                    </label>
                    <select class="form-control" name="selectedEncoding" id="selectedEncoding">
                        <option value="utf8">UTF-8</option>
                        <option value="ascii">ASCII (or RAW)</option>
                        <option value="latin1">ISO-8859-1 (or Latin1 or ANSI)</option>
                    </select>
                    <input class="form-check-input" type="checkbox" name="incremental" id="incremental" value="true">
                    <label class="form-check-label mr-3" for="incremental">
                        Incremental
                    </label>

                </div>

                <button type="button" class="btn btn-primary" onclick="runJTR()">Run John the Ripper</button>
            </form>
        </div>
        <!-- Right Column: Output Container -->
        <div class="col-md-6">
            <h4>Output:</h4>
            <div id="output-container">
                <!-- Output will be displayed here -->
            </div>
            <button id="saveResultsButton" class="btn btn-success mt-3" onclick="saveResults()">Save Results</button>
            <button id="clearResultsButton" class="btn btn-success mt-3" onclick="clearResults()">Clear Results</button>
            <h4 class="mt-3">Send Signals:</h4>

            <div class="">
                <form asp-page-handler="Signal" method="post" class="btn-group" role="group">
                    <input type="hidden" name="signal" value="check" />
                    <button class="btn btn-success" type="submit">CHECK</button>
                </form>

                <form asp-page-handler="Signal" method="post" class="btn-group" role="group">
                    <input type="hidden" name="signal" value="kill" />
                    <button class="btn btn-warning" type="submit">KILL</button>
                </form>
                
                <form asp-page-handler="Signal" method="post" class="btn-group" role="group">
                    <input type="hidden" name="signal" value="kill-all" />
                    <button class="btn btn-danger" type="submit">KILL ALL</button>
                </form>
                <form id="KeepAliveForm" method="post" class="btn-group" role="group">
                    <input type="hidden" name="signal" value="keep-alive" />
                </form>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.9/signalr.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/commandHub")
            .build();

        connection.on("ReceiveOutput", function (output) {
            // Append the output to the div
            var outputContainer = document.getElementById("output-container");
            outputContainer.innerHTML += "<timestamp>" + getHumanReadableTimestamp() + "</timestamp>";
            outputContainer.innerHTML += output + "<br/>";
            outputContainer.scrollTop = outputContainer.scrollHeight;
        });

        connection.start().catch(function (err) {
            return console.error(err.toString());
        });
        $(document).ready(function () {
            // Initial setup on page load
            updateFormBasedOnInputOption();

            // Handle radio button change event for inputOption
            $('input[name="inputOption"]').change(function () {
                updateFormBasedOnInputOption();
            });

            $('input[name="wordListOption"]').change(function () {
                updateFormBasedOnInputOption();
            });
        });

        function updateFormBasedOnInputOption() {
            var selectedInputOption = $('input[name="inputOption"]:checked').val();
            var selectedWordlistOption = $('input[name="wordListOption"]:checked').val();

            // Enable or disable input fields based on the selected inputOption
            if (selectedInputOption === "input") {
                $("#input").prop("disabled", false);
                $("#hashListFile").prop("disabled", true);
            } else if (selectedInputOption === "file") {
                $("#input").prop("disabled", true);
                $("#hashListFile").prop("disabled", false);
            }

            if (selectedWordlistOption === "no-wordlist") {
                $("#wordListFile").prop("disabled", true);
                $("#selectedWordList").prop("disabled", true);
            } else if (selectedWordlistOption === "file") {
                $("#wordListFile").prop("disabled", false);
                $("#selectedWordList").prop("disabled", true);
            } else if (selectedWordlistOption === "selection") {
                $("#wordListFile").prop("disabled", true);
                $("#selectedWordList").prop("disabled", false);
            }
        }

        function runJTR() {
            var formData = new FormData(document.getElementById("runJTRForm"));
            console.log(formData);

            $.ajax({
                type: "POST",
                url: "/John?handler=RunJTR",
                data: formData,
                contentType: false,
                processData: false,
                success: function (data) {
                    console.log(data); // Log success message if needed
                    // Enable the view results button
                    $("#viewResultsButton").prop("disabled", false);
                },
                error: function (error) {
                    console.error(error.responseText);
                }
            });
        }

        function keepConnectionAlive() {
            var reqData = new FormData(document.getElementById("KeepAliveForm"));

            $.ajax({
                type: "POST",
                url: "/John?handler=Signal",
                data: reqData,
                contentType: false,
                processData: false,
                success: function (data) {
                },
                error: function (error) {
                    console.error('Error keeping connection alive:', error);
                }
            });
        }

        // Perform the initial keep alive and set an interval to repeat it
        keepConnectionAlive();
        setInterval(keepConnectionAlive, 60000); // Repeat every minute (adjust as needed)




        function saveResults() {
            var container = document.getElementById("output-container");
            // Extract timestamp and tag information
            const entries = Array.from(container.children);
            
            // Create an array to store formatted lines
            const formattedLines = [];

            for (let i = 0; i < entries.length; i += 2) {
                const timestamp = entries[i].innerText.trim();
                const tag = entries[i + 1].tagName.toLowerCase();
                const text = entries[i + 1].innerText.trim();

                formattedLines.push(`${timestamp} - Tag: ${tag} - ${text}`);
            }

            // Combine lines into a single string
            const resultString = formattedLines.join('\n');

            // Save the string to a file
            const blob = new Blob([resultString], { type: 'text/plain' });
            const a = document.createElement('a');
            a.href = URL.createObjectURL(blob);
            a.download = 'output.txt';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }

        function clearResults() {
            // Redirect to a new page or implement logic to display results
            var outputContainer = document.getElementById("output-container");
            outputContainer.innerHTML = "";
        }

        function getHumanReadableTimestamp() {
            const currentDate = new Date();

            const year = currentDate.getFullYear();
            const month = String(currentDate.getMonth() + 1).padStart(2, '0');
            const day = String(currentDate.getDate()).padStart(2, '0');
            const hours = String(currentDate.getHours()).padStart(2, '0');
            const minutes = String(currentDate.getMinutes()).padStart(2, '0');
            const seconds = String(currentDate.getSeconds()).padStart(2, '0');
            const milliseconds = String(currentDate.getMilliseconds()).padStart(3, '0');

            const timestamp = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}.${milliseconds}`;
            return timestamp;
        }


    </script>
}
